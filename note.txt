MVC-
model      -- chef is model (all business login here) 
view       --restro menu (first user intraction)
controller -- waiter (InterMeditate layer between view and model)

model<----------->controller<----------------->View

view           controller                 model
------------------------------------------------------------------------------
---------> (do some Task) ----------->  bussiness logic
                                                database

        <------------- do some task  <------------

controller forward request to backend models
it prepares response object

-->: authantication is done on middleware layer,if user is authanticated then go forward in controller part

routes folder :-registration of middleware and controller to routes

servies folder :business logic it will dipend on repository layer ,repository folder do database intraction

schema folder / model folder :- db structure

util folder : comman share code 

seed folder: seeders for testing ,sample data for testing purpose in development 

migration folder : chnages in schema in database  
-------------------------------------------------------------------------------
npm i express for server 
npm i dotenv 
npm i http-status-code for status code with given right name enum mapping


every folder have one index.js file because 
let example - agr hamere pass 20 controller file hai to 20 file ko require krna padega jhan unka use hoga agr ham ek index.js file me hi sare controller ko handel kre to index .js file use kr sakte hen

in routes folder version is important for api versioning

nodemon -npx nodemon index.js

package.json

you can write own scripts for development purpose and testing purpose.

scripts:{
        "dev":"npx nodemon src/index.js"
}

npm run dev (this cmd use to run node project in development enviorment)

routing----
-----------------
Routing refers to how an application endpoints(URIS) respond to client request,
You define routing using method of the express app object that  correspond to HTTP method for example app.get() to handel GET request and app.post() to handle post request ,you can see full list app.METHOD ,
you can use app.all() to handle app HTTP method and app.use() to specify middleware as the callback function 


-------------------
how api goes though localhost:8080/api ,melega to apiROutes par jayega vhan se version1 mielga fir uske baad info par jayega

/api/version1/info par data milega
------------------------------

orm vs odm--

object relational mapping--

sequelize orm-
npm install sequelize

orm is convert your sql query into object oriented code

install driver for db

npm install mysql2 (for my saql)

sequelize cli (package) for mysql setup++ is easy to use
 npm install sequelize-cli

 npx sequelize init cmd  -that initializes project
  go to src/config folder -- then npx sequelize init

  Sequelize CLI [Node: 18.14.2, CLI: 6.6.2, ORM: 6.35.2]

Created "config\config.json"
Successfully created models folder at "E:\Backend\NodesTemplate\src\models".
Successfully created migrations folder at "E:\Backend\NodesTemplate\src\migrations".
Successfully created seeders folder at "E:\Backend\NodesTemplate\src\seeders".


it automaticaly create config.json file and model folder if you does'nt have that

(npx is package executer)

npx sequelize init create config.json file

it create  3 enviorment

development- for development phase (development database)

testing-development project in testing phase (test database)

prodction - actual user intracting 